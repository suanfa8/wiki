"use strict";(self.webpackChunkblog_tools=self.webpackChunkblog_tools||[]).push([[1771],{2788:(e,t,a)=>{a.r(t),a.d(t,{data:()=>n});const n={key:"v-25e03ec6",path:"/RabbitMQ/6-application/6.3-traffic-peaking.html",title:"6.3-流量削峰",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"RabbitMQ/6-application/6.3-traffic-peaking.md",git:{updatedTime:163819854e4,contributors:[{name:"suanfa8",email:"45396320+suanfa8@users.noreply.github.com",commits:3}]}}},8779:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});const n=(0,a(6252).uE)('<h1 id="_6-3-流量削峰" tabindex="-1"><a class="header-anchor" href="#_6-3-流量削峰" aria-hidden="true">#</a> 6.3-流量削峰</h1><nav class="table-of-contents"><ul></ul></nav><p><code>场景:</code> 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。</p><p><code>作用:</code></p><p>​ 1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^)</p><p>​ 2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)</p><p><img src="https://images.gitee.com/uploads/images/2021/1027/193833_2d03b0a4_426516.png" alt="输入图片说明" title="屏幕截图.png"></p><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.</p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p>',9),p={},i=(0,a(3744).Z)(p,[["render",function(e,t){return n}]])},3744:(e,t)=>{t.Z=(e,t)=>{const a=e.__vccOpts||e;for(const[e,n]of t)a[e]=n;return a}}}]);