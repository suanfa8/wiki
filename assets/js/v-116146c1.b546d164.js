"use strict";(self.webpackChunkblog_tools=self.webpackChunkblog_tools||[]).push([[9144],{396:(e,a,l)=>{l.r(a),l.d(a,{data:()=>s});const s={key:"v-116146c1",path:"/RabbitMQ/1-intro.html",title:"第 1 章 RabbitMQ 引言",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.1-什么是 Message Quene",slug:"_1-1-什么是-message-quene",children:[]},{level:2,title:"1.2 Message Quene 有哪些",slug:"_1-2-message-quene-有哪些",children:[]},{level:2,title:"1.3 不同 Message Quene 的特点",slug:"_1-3-不同-message-quene-的特点",children:[]}],filePathRelative:"RabbitMQ/1-intro.md",git:{updatedTime:163819854e4,contributors:[{name:"suanfa8",email:"45396320+suanfa8@users.noreply.github.com",commits:3}]}}},4819:(e,a,l)=>{l.r(a),l.d(a,{default:()=>d});var s=l(6252);const t=(0,s._)("h1",{id:"第-1-章-rabbitmq-引言",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#第-1-章-rabbitmq-引言","aria-hidden":"true"},"#"),(0,s.Uk)(" 第 1 章 RabbitMQ 引言")],-1),n={class:"table-of-contents"},i=(0,s.Uk)("1.1-什么是 Message Quene"),u=(0,s.Uk)("1.2 Message Quene 有哪些"),o=(0,s.Uk)("1.3 不同 Message Quene 的特点"),c=(0,s.uE)('<h2 id="_1-1-什么是-message-quene" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-message-quene" aria-hidden="true">#</a> 1.1-什么是 Message Quene</h2><ul><li><p><code>MQ</code> (Message Quene)：翻译为「消息队列」，通过典型的「生产者」和「消费者」模型，生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息；</p></li><li><p>由于消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，轻松的实现系统间解耦；</p></li><li><p>别名为「消息中间件」，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成；</p></li></ul><h2 id="_1-2-message-quene-有哪些" tabindex="-1"><a class="header-anchor" href="#_1-2-message-quene-有哪些" aria-hidden="true">#</a> 1.2 Message Quene 有哪些</h2><p>当今市面上有很多主流的消息中间件，如老牌的 <code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的 <code>Kafka</code>，阿里巴巴自主开发 <code>RocketMQ</code> 等。</p><h2 id="_1-3-不同-message-quene-的特点" tabindex="-1"><a class="header-anchor" href="#_1-3-不同-message-quene-的特点" aria-hidden="true">#</a> 1.3 不同 Message Quene 的特点</h2><ol><li>ActiveMQ</li></ol><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的 API，多种集群架构模式让 ActiveMQ 在业界成为老牌的消息中间件，在中小型企业颇受欢迎!</p><ol start="2"><li>Kafka</li></ol><p>Kafka 是 LinkedIn 开源的分布式发布-订阅消息系统，目前归属于 Apache 顶级项目。Kafka主要特点是基于 Pull 的模式来处理消息消费，</p><p>追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。</p><ul><li>3.RocketMQ</li></ul><p>RocketMQ 是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ 思路起源于 Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。</p><ul><li>4.RabbitMQ</li></ul><p>RabbitMQ 是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。AMQP 的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p><p>AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><blockquote><p>RabbitMQ 比 Kafka 可靠，Kafka 更适合 IO 高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如 ELK 日志收集。</p></blockquote>',16),r={},d=(0,l(3744).Z)(r,[["render",function(e,a){const l=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("nav",n,[(0,s._)("ul",null,[(0,s._)("li",null,[(0,s.Wm)(l,{to:"#_1-1-什么是-message-quene"},{default:(0,s.w5)((()=>[i])),_:1})]),(0,s._)("li",null,[(0,s.Wm)(l,{to:"#_1-2-message-quene-有哪些"},{default:(0,s.w5)((()=>[u])),_:1})]),(0,s._)("li",null,[(0,s.Wm)(l,{to:"#_1-3-不同-message-quene-的特点"},{default:(0,s.w5)((()=>[o])),_:1})])])]),c],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{const l=e.__vccOpts||e;for(const[e,s]of a)l[e]=s;return l}}}]);