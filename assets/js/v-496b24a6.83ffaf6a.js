"use strict";(self.webpackChunkblog_tools=self.webpackChunkblog_tools||[]).push([[5986],{3275:(e,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-496b24a6",path:"/SpringCloud/1-5/2-Why-are-microservices.html",title:"2-为什么是微服务？",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"单体应用",slug:"单体应用",children:[{level:3,title:"优点",slug:"优点",children:[]},{level:3,title:"缺点",slug:"缺点",children:[]}]},{level:2,title:"微服务架构应用",slug:"微服务架构应用",children:[{level:3,title:"优点",slug:"优点-1",children:[]},{level:3,title:"缺点",slug:"缺点-1",children:[]}]},{level:2,title:"架构的演变",slug:"架构的演变",children:[{level:3,title:"架构的演变过程",slug:"架构的演变过程",children:[]}]}],filePathRelative:"SpringCloud/1-5/2-Why-are-microservices.md",git:{updatedTime:1638143942e3,contributors:[{name:"suanfa8",email:"45396320+suanfa8@users.noreply.github.com",commits:1}]}}},9932:(e,l,i)=>{i.r(l),i.d(l,{default:()=>r});const a=(0,i(6252).uE)('<h1 id="_2-为什么是微服务" tabindex="-1"><a class="header-anchor" href="#_2-为什么是微服务" aria-hidden="true">#</a> 2-为什么是微服务？</h1><h2 id="单体应用" tabindex="-1"><a class="header-anchor" href="#单体应用" aria-hidden="true">#</a> 单体应用</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwuxsa7widj31ke0f4dhj.jpg" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><p>单一架构模式在项目初期很小的时候开发方便，测试方便，部署方便，运行良好。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>应用随着时间的推进，加入的功能越来越多，最终会变得巨大，一个项目中很有可能数百万行的代码，互相之间繁琐的 jar 包；</li><li>久而久之，开发效率低，代码维护困难；</li><li>还有一个如果想整体应用采用新的技术，新的框架或者语言，那是不可能的；</li><li>任意模块的漏洞或者错误都会影响这个应用，降低系统的可靠性。</li></ul><h2 id="微服务架构应用" tabindex="-1"><a class="header-anchor" href="#微服务架构应用" aria-hidden="true">#</a> 微服务架构应用</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwvo2bkpf5j31oy0j8dik.jpg" alt="输入图片说明" title="屏幕截图.png"></p><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h3><ul><li>将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信；</li><li>每个服务应该有自己单独的管理团队，高度自治；</li><li>服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务崩溃。</li></ul><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h3><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li><strong>服务治理</strong> 和 <strong>服务监控</strong> 是关键。</li></ul><blockquote><p>最难的是：服务治理、服务监控。</p></blockquote><h2 id="架构的演变" tabindex="-1"><a class="header-anchor" href="#架构的演变" aria-hidden="true">#</a> 架构的演变</h2><h3 id="架构的演变过程" tabindex="-1"><a class="header-anchor" href="#架构的演变过程" aria-hidden="true">#</a> 架构的演变过程</h3><ul><li>[单一应用架构] <code>===&gt;</code> [垂直应用架构] <code>===&gt;</code> [分布式服务架构] <code>===&gt;</code> [流动计算架构]||[微服务架构] <code>===&gt;</code> [未知]</li></ul><p>Dubbo 官网的架构图：http://dubbo.apache.org/zh-cn/docs/user/preface/background.html</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwvo2r2dffj31dx0adwg5.jpg" alt="输入图片说明" title="屏幕截图.png"></p><ol><li>All in One Application：单一架构</li></ol><ul><li>起初当网站流量很小时，将所有功能都写在一个应用里面，对整个应用进行部署，以减少部署节点和成本。对于这个架构简化增删改查的工作量的数据访问框架（ORM）是关键。</li></ul><ol start="2"><li>Vertical Application：垂直架构</li></ol><ul><li>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web 框架（MVC）是关键。</li></ul><ol start="3"><li>Distributed Service：分布式服务架构</li></ol><ul><li>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</li></ul><ol start="4"><li>Elastic Computing：流动计算架构即微服务架构</li></ol><blockquote><p>弹性计算</p></blockquote><ul><li><p><strong>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心（SOA）是关键。</strong></p></li><li><p>友情提醒：<strong>好的架构并不是设计出来的，一定是进化来的</strong>。</p></li></ul>',28),t={},r=(0,i(3744).Z)(t,[["render",function(e,l){return a}]])},3744:(e,l)=>{l.Z=(e,l)=>{const i=e.__vccOpts||e;for(const[e,a]of l)i[e]=a;return i}}}]);