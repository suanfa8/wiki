"use strict";(self.webpackChunkblog_tools=self.webpackChunkblog_tools||[]).push([[3863],{683:(e,a,l)=>{l.r(a),l.d(a,{data:()=>r});const r={key:"v-e894cdf6",path:"/SpringCloud/6-center/6-6-compare.html",title:"6-6 不同注册中心区别（这一节有空的时候多看看）",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"CAP 定理",slug:"cap-定理",children:[{level:3,title:"CAP 定理",slug:"cap-定理-1",children:[]},{level:3,title:"Eureka 特点",slug:"eureka-特点",children:[]},{level:3,title:"Consul 特点",slug:"consul-特点",children:[]},{level:3,title:"zookeeper 特点",slug:"zookeeper-特点",children:[]}]}],filePathRelative:"SpringCloud/6-center/6-6-compare.md",git:{updatedTime:1638143942e3,contributors:[{name:"suanfa8",email:"45396320+suanfa8@users.noreply.github.com",commits:1}]}}},939:(e,a,l)=>{l.r(a),l.d(a,{default:()=>n});const r=(0,l(6252).uE)('<h1 id="_6-6-不同注册中心区别-这一节有空的时候多看看" tabindex="-1"><a class="header-anchor" href="#_6-6-不同注册中心区别-这一节有空的时候多看看" aria-hidden="true">#</a> 6-6 不同注册中心区别（这一节有空的时候多看看）</h1><h2 id="cap-定理" tabindex="-1"><a class="header-anchor" href="#cap-定理" aria-hidden="true">#</a> CAP 定理</h2><p>服务注册中心集群 node1 node2 node3 ... eureka(AP) consul zk(CP)</p><h3 id="cap-定理-1" tabindex="-1"><a class="header-anchor" href="#cap-定理-1" aria-hidden="true">#</a> CAP 定理</h3><p>CAP 定理又称 CAP 原则，指的是在一个分布式系统中：</p><ul><li>一致性（Consistency）</li><li>可用性（Availability）</li><li>分区容错性（Partition tolerance）。</li></ul><p>CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p><ul><li>一致性（C）</li></ul><p>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）；</p><ul><li>可用性（A）</li></ul><p>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）；</p><ul><li>分区容忍性（P）</li></ul><p>就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）。</p><h3 id="eureka-特点" tabindex="-1"><a class="header-anchor" href="#eureka-特点" aria-hidden="true">#</a> Eureka 特点</h3><p>Eureka 中没有使用任何的数据强一致性算法保证不同集群间的 Server 的数据一致，仅通过数据拷贝的方式争取注册中心数据的最终一致性，虽然放弃数据强一致性但是换来了 Server 的可用性，降低了注册的代价，提高了集群运行的健壮性。</p><h3 id="consul-特点" tabindex="-1"><a class="header-anchor" href="#consul-特点" aria-hidden="true">#</a> Consul 特点</h3><ul><li>基于 Raft 算法，Consul 提供强一致性的注册中心服务，但是由于 Leader 节点承担了所有的处理工作，势必加大了注册和发现的代价，降低了服务的可用性。通过 Gossip 协议，Consul 可以很好地监控 Consul 集群的运行，同时可以方便通知各类事件，如 Leader 选择发生、Server 地址变更等。</li></ul><h3 id="zookeeper-特点" tabindex="-1"><a class="header-anchor" href="#zookeeper-特点" aria-hidden="true">#</a> zookeeper 特点</h3><ul><li>基于 Zab 协议，Zookeeper可以用于构建具备数据强一致性的服务注册与发现中心，而与此相对地牺牲了服务的可用性和提高了注册需要的时间。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvu7a9lhgrj318c09oab7.jpg" alt="image-20200710135837525"></p>',20),i={},n=(0,l(3744).Z)(i,[["render",function(e,a){return r}]])},3744:(e,a)=>{a.Z=(e,a)=>{const l=e.__vccOpts||e;for(const[e,r]of a)l[e]=r;return l}}}]);